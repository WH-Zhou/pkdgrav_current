#!/usr/bin/env python2
###################################################################################################################################
# Python script that creats walls.dat and ssdraw.par files for WALLS_REACT visualizations or restarts
# Author: Ronald Ballouz
# Last update: 2/2/2017
# Usage:
# pyhthon movewallsFileCreator.py (restart_switch)
# Notes:
# restart_switch has a default value of 0 (off), this creates walls.dat for each .r output file for visualizations
# If restart_switch is set to 1 then the script will create 1 walls.dat restart file
# Assumes files called ssdraw.par, povray.inc, walls.dat
# Assumes walls.dat is formatted in such a way that the origin is specified in the line right after wall!!import numpy as np
# Requirements:
# Python 2.7+ and Numpy
###################################################################################################################################

from numpy import *
import sys
import os
import subprocess

##Usage Statements##
if len(sys.argv) > 2:
  print "Usage: python movewallsFileCreator.py (restart_switch)"
  sys.exit()
elif len(sys.argv) == 2:
  if int(sys.argv[1]) != 0 and int(sys.argv[1]) != 1:
    print "Usage: python movewallsFileCreator.py (restart_switch)"
    print "restart_switch needs to be set to 0 or 1"
    print "0: generate walls.dat files for visualization"
    print "1: generate walls.dat file for restart"
    sys.exit()
  else:
    restart_switch = int(sys.argv[1])
elif len(sys.argv) == 1:
  restart_switch = 0

##get data##
if restart_switch == 0:
  data=genfromtxt("WALLSREACTviz.out")
elif restart_switch == 1:
  #get last output file	and make sure
  os.system("cat WALLSREACTdata.out | tail -1 > mfc_data_temp.dat")
  os.system("cat WALLSREACTviz.out | tail -1 > mfc_viz_temp.dat")
  re_viz=genfromtxt("mfc_viz_temp.dat")
  re_data=genfromtxt("mfc_data_temp.dat")
  #First element of both arrays should be equal
  if re_viz[0] != re_data[0]:
    print "Mismatch in last line of WALLSREACTdata.out and WALLSREACTviz.out"
    print "Check to make sure that these files were generated by the same run"
    sys.exit()
  os.system("rm mfc_*temp.dat")

##Length and Time units##
lu=1.0/6.6845871226705983e-14 # au in cm
tu=1.0/1.99102e-7 # yr/2pi in sec

proc = subprocess.Popen(["awk '/nDigits/{print $3}' ss.par"], stdout=subprocess.PIPE, shell=True)
(nDigits, err) = proc.communicate()
nDigits=int(nDigits)

###Creating the files
####################Visualization Case#############
if restart_switch == 0:
  for i in arange(len(data[:,0])):
    walld=open('walls_def.dat', 'r')
    ssdrawd=open('ssdraw_def.par','r')    
    j=0 #Triangle and Rectangle Counter
    k=0 #Cylinder and Circle Counter
    rect_switch=0
    circ_switch=0
    first_switch=0
    curr_data=data[i,:]
    Frame=str(int(curr_data[0])).zfill(nDigits)

    red="ss."+Frame+".r"
    wallframe="walls"+Frame+".dat"
    ssdrawframe="ssdraw"+Frame+".par"
    print red
    print wallframe
    
    wallf=open(wallframe, 'w+')
    ssdrawf=open(ssdrawframe, 'w+')
    #while ('velocity' not in line):#write out all content till velocity line reached, i.e., write out all non-inertial walls (containers).
    #  line=walld.readline() 
    #  wallf.write(line)
    for line in walld:
      if line.startswith("#"):
        continue
      if 'wall type rectangle' in line or 'wall type triangle' in line:
        rect_switch=1
      if 'wall type cylinder-finite' in line or 'wall type disk' in line or 'wall type shell' in line:
        circ_switch=1
      #rect case
      if 'origin' in line and rect_switch==1:
        wallf.write('\torigin '+str(curr_data[3+((j*11)+(k*8))]*lu)+' '+str(curr_data[4+((j*11)+(k*8))]*lu)+' '+str(curr_data[5+((j*11)+(k*8))]*lu)+'\n')
      elif 'vertex1' in line and rect_switch==1:
        wallf.write('\tvertex1 '+str(curr_data[6+((j*11)+(k*8))]*lu)+' '+str(curr_data[7+((j*11)+(k*8))]*lu)+' '+str(curr_data[8+((j*11)+(k*8))]*lu)+'\n')
      elif 'vertex2' in line and rect_switch==1:
        wallf.write('\tvertex2 '+str(curr_data[9+((j*11)+(k*8))]*lu)+' '+str(curr_data[10+((j*11)+(k*8))]*lu)+' '+str(curr_data[11+((j*11)+(k*8))]*lu)+'\n')
        rect_switch=0
        j=j+1
      #circ case
      elif 'origin' in line and circ_switch==1 and j>=0:
        wallf.write('\torigin '+str(curr_data[3+((j*11)+(k*8))]*lu)+' '+str(curr_data[4+((j*11)+(k*8))]*lu)+' '+str(curr_data[5+((j*11)+(k*8))]*lu)+'\n')
        wallf.write('\torient '+str(curr_data[6+((j*11)+(k*8))])+' '+str(curr_data[7+((j*11)+(k*8))])+' '+str(curr_data[8+((j*11)+(k*8))])+'\n')
        circ_switch=0
        k=k+1
      elif 'velocity' in line:
        wallf.write('')
      elif 'osc-phase' in line:
        wallf.write('')
      elif 'orient' in line:
        wallf.write('')
      else:
        wallf.write(line)

    for sline in ssdrawd:
      if 'walls.dat' in sline:
        ssdrawf.write("Wall data file		\""+wallframe+"\" ! In quotes (leave blank for no walls)\n")
      else:
        ssdrawf.write(sline)
    wallf.close()
    walld.close()
    ssdrawf.close()
    ssdrawd.close()
####################Restart Case#############
elif restart_switch == 1:
  walld=open('walls_def.dat', 'r')
  j=0 #Triangle and Rectangle Counter
  k=0 #Cylinder and Circle Counter
  rect_switch=0
  circ_switch=0
  first_switch=0
  wallframe="walls.dat_restart"
  print "Creating walls.dat_restart for step number "+str(int(re_data[0]))
  wallf=open(wallframe, 'w+')
  
  for line in walld:
    if 'wall type rectangle' in line or 'wall type triangle' in line:
      rect_switch=1
    if 'wall type cylinder-finite' in line or 'wall type disk' in line or 'wall type shell' in line:
      circ_switch=1
    #rect case
    if 'origin' in line and rect_switch==1:
      wallf.write('\torigin '+str(re_viz[3+((j*11)+(k*8))]*lu)+' '+str(re_viz[4+((j*11)+(k*8))]*lu)+' '+str(re_viz[5+((j*11)+(k*8))]*lu)+'\n')
    elif 'vertex1' in line and rect_switch==1:
      wallf.write('\tvertex1 '+str(re_viz[6+((j*11)+(k*8))]*lu)+' '+str(re_viz[7+((j*11)+(k*8))]*lu)+' '+str(re_viz[8+((j*11)+(k*8))]*lu)+'\n')
    elif 'vertex2' in line and rect_switch==1:
      wallf.write('\tvertex2 '+str(re_viz[9+((j*11)+(k*8))]*lu)+' '+str(re_viz[10+((j*11)+(k*8))]*lu)+' '+str(re_viz[11+((j*11)+(k*8))]*lu)+'\n')
      rect_switch=0
      j=j+1
    #circ case
    elif 'origin' in line and circ_switch==1 and j>=0:
      wallf.write('\torigin '+str(re_viz[3+((j*11)+(k*8))]*lu)+' '+str(re_viz[4+((j*11)+(k*8))]*lu)+' '+str(re_viz[5+((j*11)+(k*8))]*lu)+'\n')
      wallf.write('\torient '+str(re_viz[6+((j*11)+(k*8))])+' '+str(re_viz[7+((j*11)+(k*8))])+' '+str(re_viz[8+((j*11)+(k*8))])+'\n')
      circ_switch=0
      k=k+1
    elif 'orient' in line:
      wallf.write('')
    #Grab info from Data
    elif 'cog' in line:
      if 'defaults' in line:
        wallf.write('defaults cog '+str(re_data[1]*lu)+' '+str(re_data[2]*lu)+' '+str(re_data[3]*lu)+'\n')
      else:
        wallf.write('\tcog '+str(re_data[1]*lu)+' '+str(re_data[2]*lu)+' '+str(re_data[3]*lu)+'\n')
    elif 'velocity' in line:
      if 'defaults' in line:
        wallf.write('defaults velocity '+str(re_data[4]*lu/tu)+' '+str(re_data[5]*lu/tu)+' '+str(re_data[6]*lu/tu)+'\n')
      else:
        wallf.write('\tvelocity '+str(re_data[4]*lu/tu)+' '+str(re_data[5]*lu/tu)+' '+str(re_data[6]*lu/tu)+'\n')
    elif 'rot-vec' in line:
      if 'defaults' in line:
        wallf.write('defaults rot-vec '+str(re_data[7]/tu)+' '+str(re_data[8]/tu)+' '+str(re_data[9]/tu)+'\n')
      else:
        wallf.write('\trot-vec '+str(re_data[7]/tu)+' '+str(re_data[8]/tu)+' '+str(re_data[9]/tu)+'\n')
    elif 'pxj-vec'in line:
      if 'defaults' in line:
        wallf.write('defaults pxj-vec '+str(re_data[10])+' '+str(re_data[11])+' '+str(re_data[12])+'\n')
      else:
        wallf.write('\tpxj-vec '+str(re_data[10])+' '+str(re_data[11])+' '+str(re_data[12])+'\n')
    elif 'pyj-vec'in line:
      if 'defaults' in line:
        wallf.write('defaults pyj-vec '+str(re_data[13])+' '+str(re_data[14])+' '+str(re_data[15])+'\n')
      else:
        wallf.write('\tpyj-vec '+str(re_data[13])+' '+str(re_data[14])+' '+str(re_data[15])+'\n')
    elif 'pzj-vec'in line:
      if 'defaults' in line:
        wallf.write('defaults pzj-vec '+str(re_data[16])+' '+str(re_data[17])+' '+str(re_data[18])+'\n')
      else:
        wallf.write('\tpzj-vec '+str(re_data[16])+' '+str(re_data[17])+' '+str(re_data[18])+'\n')
    #Everything else
    else:
      wallf.write(line)
  wallf.close()
  walld.close()

print "Wall File Creator Complete!"
