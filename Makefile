# DO NOT EDIT THIS FILE unless you know what you are doing!
# User-configurable compile options are in Makefile.in

OS=$(shell uname)-$(shell uname -m)
PFX="$(shell pwd)"/src/
include Makefile.in

LDLIBS+=-lm # pretty much everything needs the math library...

##### set flags for different options #####

# NOTE: use spaces for indents, not tabs! #

ifeq ($(USE_COLLISIONS), true)
  PKD_CFLAGS+=-DCOLLISIONS
endif

ifeq ($(USE_WALLS), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  PKD_CFLAGS+=-DWALLS
endif

ifeq ($(USE_AGGS), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifeq ($(USE_DEM), true)
    ifneq ($(USE_DEM_ROTATION_DASHPOT), true)
      $(error AGGS with DEM requires DEM_ROTATION_DASHPOT)
    endif
  endif
  ifeq ($(USE_WALLS), true)
    ifneq ($(USE_DEM), true)
      $(error Can only combine AGGS and WALLS with DEM)
    endif
  endif
  PKD_CFLAGS+=-DAGGS
endif

ifeq ($(USE_FAST_AGGS), true)
  ifneq ($(USE_AGGS), true)
    $(error FAST_AGGS requires AGGS)
  endif
  ifeq ($(USE_SLIDING_PATCH), true)
    $(error Cannot combine FAST_AGGS and SLIDING_PATCH)
  endif
  PKD_CFLAGS+=-DFAST_AGGS
endif

ifeq ($(USE_SPINUP_WITH_AGGS), true)
  ifneq ($(USE_AGGS), true)
    $(error SPINUP_WITH_AGGS requires AGGS)
  endif
  ifneq ($(USE_SPINUP), true)
    $(error SPINUP_WITH_AGGS requires SPINUP)
  endif
  PKD_CFLAGS+=-DSPINUP_WITH_AGGS
endif

ifeq ($(USE_SPRINGS), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  PKD_CFLAGS+=-DSPRINGS
endif

ifeq ($(USE_SLIDING_PATCH), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifeq ($(USE_WALLS), true)
    $(error Cannot combine WALLS and SLIDING_PATCH)
  endif
  PKD_CFLAGS+=-DSLIDING_PATCH
  ifeq ($(USE_AGGS), true)
    PKD_CFLAGS+=-DAGGS_IN_PATCH
  endif
endif

ifeq ($(USE_DEM), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  PKD_CFLAGS+=-DDEM
endif

ifeq ($(USE_DEM_FIXED_BALL), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DDEM_FIXED_BALL
endif

ifeq ($(USE_DEM_ROTATION_DASHPOT), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DDEM_ROTATION_DASHPOT
endif

ifeq ($(USE_DEM_TRACK_ORIENT), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DDEM_TRACK_ORIENT
endif

ifeq ($(USE_DEM_COHESION), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  ifneq ($(USE_DEM_ROTATION_DASHPOT), true)
    PKD_CFLAGS+=-DDEM_ROTATION_DASHPOT
    USE_DEM_ROTATION_DASHPOT=true
  endif
  PKD_CFLAGS+=-DDEM_COHESION
endif

ifeq ($(USE_DEM_TWOLAYERS), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DDEM_TWOLAYERS
endif

ifeq ($(USE_DEM_WALLS_REACT), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_WALLS), true)
    PKD_CFLAGS+=-DWALLS
    USE_WALLS=true
  endif
  ifeq ($(USE_SLIDING_PATCH), true)
    $(error Cannot combine DEM_WALLS_REACT and SLIDING_PATCH)
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DDEM_WALLS_REACT
endif

ifeq ($(USE_DEM_OVERLAP_OUTPUT), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DOVERLAP_OUTPUT
endif

ifeq ($(USE_DEM_DIAG), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_DEM), true)
    PKD_CFLAGS+=-DDEM
    USE_DEM=true
  endif
  PKD_CFLAGS+=-DDEM_DIAG
endif

ifeq ($(USE_SPINUP), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_AGGS), true)
    PKD_CFLAGS+=-DAGGS
    USE_AGGS=true
  endif
  PKD_CFLAGS+=-DSPINUP
endif

ifeq ($(USE_SEISMIC_WAVE), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifneq ($(USE_WALLS), true)
    PKD_CFLAGS+=-DWALLS
    USE_WALLS=true
  endif
  ifeq ($(USE_SLIDING_PATCH), true)
    $(error Cannot combine SEISMIC_WAVE and SLIDING_PATCH)
  endif
  ifeq ($(USE_DEM_WALLS_REACT), true)
    $(error Cannot combine SEISMIC_WAVE and DEM_WALLS_REACT)
  endif
  PKD_CFLAGS+=-DSEISMIC_WAVE
endif

ifeq ($(USE_RUBBLE_ZML), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  ifeq ($(USE_COLLMOD_ZML), true)
    $(error RUBBLE_ZML and COLLMOD_ZML cannot be used together)
  endif
  PKD_CFLAGS+=-DRUBBLE_ZML
  ##### origin histograms ####
  ifneq ($(ORIGIN_HISTOGRAM_BINS), 0)
    PKD_CFLAGS+=-DORIGIN_HISTOGRAM -DNUM_ORIGIN_BINS=$(ORIGIN_HISTOGRAM_BINS)
  endif
endif

ifeq ($(USE_COLLMOD_ZML), true)
  ifneq ($(USE_COLLISIONS), true)
    PKD_CFLAGS+=-DCOLLISIONS
    USE_COLLISIONS=true
  endif
  PKD_CFLAGS+=-DCOLLMOD_ZML
  ##### origin histograms ####
  ifneq ($(ORIGIN_HISTOGRAM_BINS), 0)
    PKD_CFLAGS+=-DORIGIN_HISTOGRAM -DNUM_ORIGIN_BINS=$(ORIGIN_HISTOGRAM_BINS)
  endif
endif

##### handle numerical algorithm libraries #####

ifeq ($(USE_NUMREC), true)
  ifeq ($(USE_GSL), true)
    $(error USE_NUMREC and USE_GSL cannot be selected together)
  endif
  PKD_AND_SS_CFLAGS+=-DNUMREC
else ifeq ($(USE_GSL), true)
  PKD_AND_SS_CFLAGS+=-DGSL
else
  $(error Must choose USE_NUMREC or USE_GSL for numerical methods)
endif
PKD_AND_SS_CFLAGS+=$(METHOD_CFLAGS)
LDFLAGS+=$(METHOD_LDFLAGS)
LDLIBS+=$(METHOD_LDLIBS)

##### set definitions for different parallel types #####

# check validity...
ifneq ($(PKDGRAV_TYPE), mpi)
  ifneq ($(PKDGRAV_TYPE), pthread)
    ifneq ($(PKDGRAV_TYPE), null)
      $(error Unrecognised parallelization type "$(PKDGRAV_TYPE)")
    endif
  endif
endif

ifeq ($(PKDGRAV_TYPE), mpi)
  CC=$(MPICC)
  ifeq ($(USE_PARALLEL_IO), true)
    PKD_AND_SS_CFLAGS+=-DSSIO_USE_MPI
  endif
endif

ifeq ($(PKDGRAV_TYPE), pthread)
  PTHREAD_CFLAGS=-D_REENTRANT $(PTHREAD_SWITCH)
  PKD_CFLAGS+=$(PTHREAD_CFLAGS)
  PKD_LDFLAGS+=$(PTHREAD_SWITCH)
  PKD_LDLIBS+=$(PTHREAD_LDLIBS)
endif

.EXPORT_ALL_VARIABLES:

##### set folder stuff ####

FOLDERS = util ss coords rastoppm
CLEAN_FOLDERS = $(FOLDERS) mdl/mpi mdl/null mdl/pthread pkdgrav/mpi pkdgrav/null pkdgrav/pthread
FOLDERS += mdl/$(PKDGRAV_TYPE) pkdgrav/$(PKDGRAV_TYPE)

##########

# turn on debugging
ifeq ($(DEBUG), true)
	CFLAGS+=-ggdb
endif

all: $(FOLDERS)
	@echo "Copying files"
	@mkdir -p ssrun; \
		cp "`pwd -P`"/Makefile.in ssrun/Makefile.$(PKDGRAV_TYPE).in && \
		cp "`pwd -P`"/build.log ssrun/build.$(PKDGRAV_TYPE).log && \
		cp "`pwd -P`"/src/pkdgrav/$(PKDGRAV_TYPE)/$(OS)/pkdgrav ./ssrun/pkdgrav.$(PKDGRAV_TYPE) && \
		cp "`pwd -P`"/src/ss/$(OS)/ssic ./ssrun/ssic && \
		cp etc/lam.htab ssrun && \
		cp etc/mpeg.par ssrun && \
		cp etc/mpich.htab ssrun && \
		cp etc/openmpi.htab ssrun && \
		cp etc/ssdraw.par ssrun && \
		cp etc/sstest.par ssrun && \
		cp etc/ssa.sm.tmpl ssrun && \
		cp etc/sse.sm ssrun && \
		cp etc/ssic.par ssrun && \
		cp etc/submit.sh ssrun && \
		sed 's@\~/bin@../bin@' etc/ssauto.par > ssrun/ssauto.par && \
		ln -fs "`pwd -P`"/bin/scripts/ras2fli ssrun && \
		ln -fs "`pwd -P`"/bin/scripts/ssauto ssrun && \
		ln -fs "`pwd -P`"/bin/scripts/sstest ssrun && \
		ln -fs "`pwd -P`"/bin/$(OS)/rastoppm ssrun && \
		ln -fs "`pwd -P`"/bin/$(OS)/ssa ssrun && \
		ln -fs "`pwd -P`"/bin/$(OS)/ssdraw ssrun && \
		cd ssrun && rm -f *.ras && rm -f ss.????? && rm -f ss.chk* && rm -f ss.coll.txt && rm -f ss.log && rm -f ssa.??? && rm -f ssa.???? && rm -f ssauto.log* && rm -f ssic.ss && cd .. & \
		cd ssrun && ln -fs pkdgrav.$(PKDGRAV_TYPE) pkdgrav && cd .. && \
		if [ $$? -ne 0 ]; then \
			echo "Problem copying files"; \
			exit $$?; \
		else \
			echo "Finished"; \
		fi
	@if [ "`grep -i warning build.log`" != "" ]; then \
		echo '### following warnings detected in build.log ###'; \
		grep -i warning build.log; \
	fi
	@if [ "`grep -i error build.log`" != "" ]; then \
		echo '### following errors detected in build.log ###'; \
		grep -i error build.log; \
	fi

# dependencies
ss: util coords rastoppm
pkdgrav: ss mdl

$(FOLDERS): force
	@mkdir -p $(PFX)/$@/$(OS) 
	@$(MAKE) -C $(PFX)/$@/$(OS) -f ../Makefile.recurse 2>&1 | tee -a build.log

.PHONY:force
force:
	@mkdir -p bin/$(OS)
	@echo "Making on `hostname` $(OS) `date`" > build.log

remake:
	$(MAKE) clean && $(MAKE)

clean:
	@for i in $(CLEAN_FOLDERS); do \
		echo "Cleaning in $$i"; \
		if [ -d $(PFX)/$$i/$(OS) ]; then \
			$(MAKE) clean -C $(PFX)/$$i/$(OS) -f ../Makefile.recurse; \
		fi; \
	done;
	rm -rf bin/$(OS)
	rm -rf lib/$(OS)
	rm -rf ssrun
